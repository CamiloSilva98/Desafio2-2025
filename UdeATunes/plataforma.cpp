#include "Plataforma.h"
#include "Medidor.h"
#include <iostream>
#include <limits>

using namespace std;

// Constructor
Plataforma::Plataforma() {
    gestorDatos = new GestorDatos();
    reproductor = nullptr;
    usuarioActivo = nullptr;
    sesionActiva = false;
}

// Destructor
Plataforma::~Plataforma() {
    if (reproductor != nullptr) {
        delete reproductor;
    }

    delete gestorDatos;
    usuarioActivo = nullptr;
}

// Inicializar sistema
bool Plataforma::inicializar() {
    cout << "\n[Sistema] Cargando datos desde archivos..." << endl;

    if (!gestorDatos->cargarDatos()) {
        cout << "[Error] No se pudieron cargar los datos del sistema." << endl;
        return false;
    }

    cout << "[Sistema] ‚úì Datos cargados exitosamente." << endl;
    return true;
}

// Finalizar sistema
void Plataforma::finalizar() {
    cout << "\n[Sistema] Guardando cambios..." << endl;

    if (gestorDatos->guardarDatos()) {
        cout << "[Sistema] ‚úì Cambios guardados correctamente." << endl;
    } else {
        cout << "[Error] No se pudieron guardar los cambios." << endl;
    }
}

// Limpiar buffer de entrada
void Plataforma::limpiarBuffer() {
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

// Autenticaci√≥n de usuario
bool Plataforma::autenticar() {
    string nickname;
    cout << "\n> Ingresa tu nickname: ";
    getline(cin, nickname);

    usuarioActivo = gestorDatos->buscarUsuario(nickname);

    if (usuarioActivo == nullptr) {
        cout << "\n[Error] Usuario no encontrado." << endl;
        cout << "Verifica tu nickname e intenta de nuevo.\n" << endl;
        return false;
    }

    reproductor = new Reproductor(usuarioActivo);
    reproductor->cargarCanciones(gestorDatos->getArtistas());

    sesionActiva = true;
    return true;
}

// Cerrar sesi√≥n
void Plataforma::cerrarSesion() {
    if (reproductor != nullptr) {
        delete reproductor;
        reproductor = nullptr;
    }

    usuarioActivo = nullptr;
    sesionActiva = false;

    cout << "\n[Sistema] Sesi√≥n cerrada correctamente." << endl;
}

// Mostrar bienvenida personalizada
void Plataforma::mostrarBienvenida() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë              ¬°BIENVENIDO A UDEATUNES!                  ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    cout << "\nüë§ Usuario: " << usuarioActivo->getNickname() << endl;
    cout << "üìç Ubicaci√≥n: " << usuarioActivo->getCiudad() << ", "
         << usuarioActivo->getPais() << endl;
    cout << "üéñÔ∏è  Membres√≠a: " << usuarioActivo->getTipoMembresia() << endl;

    if (usuarioActivo->esPremium()) {
        cout << "\n‚ú® Disfruta de tus beneficios premium:" << endl;
        cout << "   ‚Ä¢ Sin publicidad" << endl;
        cout << "   ‚Ä¢ Audio en alta calidad (320 kbps)" << endl;
        cout << "   ‚Ä¢ Listas de favoritos personalizadas" << endl;
        cout << "   ‚Ä¢ Retroceder hasta 4 canciones" << endl;
    } else {
        cout << "\nüí° Actualiza a Premium y disfruta:" << endl;
        cout << "   ‚Ä¢ Sin anuncios publicitarios" << endl;
        cout << "   ‚Ä¢ Mejor calidad de audio" << endl;
        cout << "   ‚Ä¢ Listas de favoritos ilimitadas" << endl;
    }

    cout << "\n" << endl;
}

// Mostrar despedida
void Plataforma::mostrarDespedida() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë             ¬°GRACIAS POR USAR UDEATUNES!               ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    cout << "\nüéµ Nos vemos pronto, " << usuarioActivo->getNickname() << "!" << endl;
    cout << "   Tu m√∫sica te espera.\n" << endl;
}

// MEN√ö USUARIO EST√ÅNDAR
void Plataforma::menuUsuarioEstandar() {
    bool enMenu = true;

    while (enMenu && sesionActiva) {
        cout << "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << endl;
        cout << "  MEN√ö PRINCIPAL - Usuario Est√°ndar" << endl;
        cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << endl;
        cout << "1. Reproducci√≥n aleatoria (modo autom√°tico)" << endl;
        cout << "2. Reproducci√≥n manual con controles" << endl;
        cout << "3. Ver historial de reproducci√≥n" << endl;
        cout << "4. Buscar canci√≥n" << endl;
        cout << "5. Cerrar sesi√≥n" << endl;
        cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << endl;

        int opcion;
        cout << "\n> Opci√≥n: ";
        cin >> opcion;
        limpiarBuffer();

        Medidor::resetear();

        switch (opcion) {
        case 1:
            reproduccionAleatoria();
            Medidor::mostrarMetricas();
            break;

        case 2:
            reproduccionManual();
            Medidor::mostrarMetricas();
            break;

        case 3:
            verHistorialReproduccion();
            Medidor::mostrarMetricas();
            break;

        case 4:
            buscarCancion();
            Medidor::mostrarMetricas();
            break;

        case 5:
            mostrarDespedida();
            cerrarSesion();
            enMenu = false;
            break;

        default:
            cout << "[Error] Opci√≥n inv√°lida." << endl;
            break;
        }
    }
}

// MEN√ö USUARIO PREMIUM
void Plataforma::menuUsuarioPremium() {
    bool enMenu = true;

    while (enMenu && sesionActiva) {
        cout << "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
        cout << "  ‚ú® MEN√ö PREMIUM ‚ú®" << endl;
        cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;
        cout << "1. Reproducci√≥n aleatoria (modo autom√°tico)" << endl;
        cout << "2. Reproducci√≥n manual con controles avanzados" << endl;
        cout << "3. Ver historial de reproducci√≥n" << endl;
        cout << "4. Buscar canci√≥n" << endl;
        cout << "5. Gestionar lista de favoritos" << endl;
        cout << "6. Reproducir favoritos" << endl;
        cout << "7. Seguir lista de otro usuario" << endl;
        cout << "8. Cerrar sesi√≥n" << endl;
        cout << "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" << endl;

        int opcion;
        cout << "\n> Opci√≥n: ";
        cin >> opcion;
        limpiarBuffer();

        Medidor::resetear();

        switch (opcion) {
        case 1:
            reproduccionAleatoria();
            Medidor::mostrarMetricas();
            break;

        case 2:
            reproduccionManual();
            Medidor::mostrarMetricas();
            break;

        case 3:
            verHistorialReproduccion();
            Medidor::mostrarMetricas();
            break;

        case 4:
            buscarCancion();
            Medidor::mostrarMetricas();
            break;

        case 5:
            gestionarFavoritos();
            Medidor::mostrarMetricas();
            break;

        case 6:
            reproducirFavoritos();
            Medidor::mostrarMetricas();
            break;

        case 7:
            seguirListaOtroUsuario();
            Medidor::mostrarMetricas();
            break;

        case 8:
            mostrarDespedida();
            cerrarSesion();
            enMenu = false;
            break;

        default:
            cout << "[Error] Opci√≥n inv√°lida." << endl;
            break;
        }
    }
}

// Reproducci√≥n aleatoria autom√°tica
void Plataforma::reproduccionAleatoria() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë          REPRODUCCI√ìN ALEATORIA AUTOM√ÅTICA             ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    reproductor->reproduccionAleatoriaTemporizador();
}

// Reproducci√≥n manual con controles
void Plataforma::reproduccionManual() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë            REPRODUCCI√ìN MANUAL CON CONTROLES           ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    reproductor->iniciarReproduccionManual();

    bool reproduciendo = true;
    while (reproduciendo && reproductor->estaReproduciendo()) {
        cout << "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << endl;
        cout << "  CONTROLES" << endl;
        cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << endl;
        cout << "1. ‚è≠Ô∏è  Siguiente" << endl;

        if (usuarioActivo->esPremium()) {
            cout << "2. ‚èÆÔ∏è  Anterior (Premium)" << endl;
            cout << "3. üîÅ Repetir ON/OFF (Premium)" << endl;
        }

        cout << "4. ‚èπÔ∏è  Detener y salir" << endl;
        cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" << endl;

        int opcion;
        cout << "\n> Opci√≥n: ";
        cin >> opcion;
        limpiarBuffer();

        switch (opcion) {
        case 1:
            reproductor->siguiente();
            break;

        case 2:
            if (usuarioActivo->esPremium()) {
                reproductor->anterior();
            } else {
                cout << "[Error] Funci√≥n exclusiva para usuarios Premium." << endl;
            }
            break;

        case 3:
            if (usuarioActivo->esPremium()) {
                reproductor->toggleRepetir();
            } else {
                cout << "[Error] Funci√≥n exclusiva para usuarios Premium." << endl;
            }
            break;

        case 4:
            reproductor->detenerReproduccion();
            reproduciendo = false;
            break;

        default:
            cout << "[Error] Opci√≥n inv√°lida." << endl;
            break;
        }
    }
}

// Ver historial de reproducci√≥n
void Plataforma::verHistorialReproduccion() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë             HISTORIAL DE REPRODUCCI√ìN                  ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    if (usuarioActivo->getCantidadHistorico() == 0) {
        cout << "\n[Info] A√∫n no has reproducido ninguna canci√≥n." << endl;
        return;
    }

    cout << "\n√öltimas canciones reproducidas:\n" << endl;

    for (int i = usuarioActivo->getCantidadHistorico() - 1; i >= 0; i--) {
        Medidor::incrementarIteraciones();
        Cancion* cancion = usuarioActivo->obtenerDelHistorico(i);

        if (cancion != nullptr) {
            cout << (usuarioActivo->getCantidadHistorico() - i) << ". "
                 << cancion->getNombre() << " (ID: " << cancion->getId() << ")" << endl;
        }
    }
}

// Buscar canci√≥n por ID
void Plataforma::buscarCancion() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë                  BUSCAR CANCI√ìN                        ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    int id;
    cout << "\n> Ingresa el ID de la canci√≥n (9 d√≠gitos): ";
    cin >> id;
    limpiarBuffer();

    Cancion* cancion = buscarCancionPorId(id);

    if (cancion == nullptr) {
        cout << "\n[Error] No se encontr√≥ ninguna canci√≥n con ese ID." << endl;
        return;
    }

    cout << "\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" << endl;
    cout << "‚îÇ  CANCI√ìN ENCONTRADA                                  ‚îÇ" << endl;
    cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << endl;
    cout << "‚îÇ T√≠tulo: " << cancion->getNombre() << endl;
    cout << "‚îÇ ID: " << cancion->getId() << endl;
    cout << "‚îÇ Duraci√≥n: " << cancion->getDuracion() << " segundos" << endl;
    cout << "‚îÇ Reproducciones: " << cancion->getReproducciones() << endl;
    cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << endl;
}

// Buscar canci√≥n por ID (m√©todo auxiliar)
Cancion* Plataforma::buscarCancionPorId(int id) {
    ArregloDinamico<Artista*>& artistas = gestorDatos->getArtistas();

    for (int i = 0; i < artistas.getCantidad(); i++) {
        Medidor::incrementarIteraciones();
        Artista* artista = artistas.obtener(i);

        for (int j = 0; j < artista->getCantidadAlbumes(); j++) {
            Medidor::incrementarIteraciones();
            Album* album = artista->obtenerAlbum(j);

            for (int k = 0; k < album->getCantidadCanciones(); k++) {
                Medidor::incrementarIteraciones();
                Cancion* cancion = album->obtenerCancion(k);

                if (cancion->getId() == id) {
                    return cancion;
                }
            }
        }
    }

    return nullptr;
}

// GESTIONAR FAVORITOS (PREMIUM)
void Plataforma::gestionarFavoritos() {
    bool enSubmenu = true;

    while (enSubmenu) {
        cout << "\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" << endl;
        cout << "‚îÇ          GESTI√ìN DE LISTA DE FAVORITOS              ‚îÇ" << endl;
        cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << endl;
        cout << "‚îÇ 1. Ver mis favoritos                                 ‚îÇ" << endl;
        cout << "‚îÇ 2. Agregar canci√≥n a favoritos                       ‚îÇ" << endl;
        cout << "‚îÇ 3. Eliminar canci√≥n de favoritos                     ‚îÇ" << endl;
        cout << "‚îÇ 4. Volver al men√∫ principal                          ‚îÇ" << endl;
        cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << endl;

        int opcion;
        cout << "\n> Opci√≥n: ";
        cin >> opcion;
        limpiarBuffer();

        switch (opcion) {
        case 1:
            verFavoritos();
            break;

        case 2:
            agregarAFavoritos();
            break;

        case 3:
            eliminarDeFavoritos();
            break;

        case 4:
            enSubmenu = false;
            break;

        default:
            cout << "[Error] Opci√≥n inv√°lida." << endl;
            break;
        }
    }
}

// Ver favoritos
void Plataforma::verFavoritos() {
    ListaFavoritos* lista = usuarioActivo->getListaFavoritos();

    if (lista == nullptr || lista->estaVacia()) {
        cout << "\n[Info] Tu lista de favoritos est√° vac√≠a." << endl;
        return;
    }

    cout << "\nüéµ MI LISTA DE FAVORITOS (" << lista->getCantidad() << "/10000)" << endl;
    cout << "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n" << endl;

    for (int i = 0; i < lista->getCantidad(); i++) {
        Medidor::incrementarIteraciones();
        Cancion* cancion = lista->obtenerCancion(i);

        if (cancion != nullptr) {
            cout << (i + 1) << ". " << cancion->getNombre()
            << " (ID: " << cancion->getId() << ")" << endl;
        }
    }
}

// Agregar a favoritos
void Plataforma::agregarAFavoritos() {
    ListaFavoritos* lista = usuarioActivo->getListaFavoritos();

    if (lista == nullptr) {
        cout << "[Error] No tienes una lista de favoritos creada." << endl;
        return;
    }

    if (lista->estaLlena()) {
        cout << "[Error] Tu lista de favoritos est√° llena (10,000 canciones)." << endl;
        return;
    }

    int id;
    cout << "\n> Ingresa el ID de la canci√≥n a agregar: ";
    cin >> id;
    limpiarBuffer();

    Cancion* cancion = buscarCancionPorId(id);

    if (cancion == nullptr) {
        cout << "[Error] No se encontr√≥ una canci√≥n con ese ID." << endl;
        return;
    }

    if (lista->contiene(id)) {
        cout << "[Error] Esta canci√≥n ya est√° en tus favoritos." << endl;
        return;
    }

    if (lista->agregar(cancion)) {
        cout << "\n[‚úì] Canci√≥n agregada a favoritos: " << cancion->getNombre() << endl;
    } else {
        cout << "[Error] No se pudo agregar la canci√≥n." << endl;
    }
}

// Eliminar de favoritos
void Plataforma::eliminarDeFavoritos() {
    ListaFavoritos* lista = usuarioActivo->getListaFavoritos();

    if (lista == nullptr || lista->estaVacia()) {
        cout << "[Info] Tu lista de favoritos est√° vac√≠a." << endl;
        return;
    }

    int id;
    cout << "\n> Ingresa el ID de la canci√≥n a eliminar: ";
    cin >> id;
    limpiarBuffer();

    if (lista->eliminar(id)) {
        cout << "\n[‚úì] Canci√≥n eliminada de favoritos." << endl;
    } else {
        cout << "[Error] No se encontr√≥ esa canci√≥n en tus favoritos." << endl;
    }
}

// Reproducir favoritos
void Plataforma::reproducirFavoritos() {
    ListaFavoritos* lista = usuarioActivo->getListaFavoritos();

    if (lista == nullptr || lista->estaVacia()) {
        cout << "[Info] Tu lista de favoritos est√° vac√≠a." << endl;
        return;
    }

    cout << "\n¬øC√≥mo deseas reproducir tus favoritos?" << endl;
    cout << "1. En orden original" << endl;
    cout << "2. Modo aleatorio" << endl;

    int opcion;
    cout << "\n> Opci√≥n: ";
    cin >> opcion;
    limpiarBuffer();

    bool modoAleatorio = (opcion == 2);
    reproductor->reproducirFavoritos(modoAleatorio);
}

// Seguir lista de otro usuario
void Plataforma::seguirListaOtroUsuario() {
    string nickname;
    cout << "\n> Ingresa el nickname del usuario premium a seguir: ";
    getline(cin, nickname);

    Usuario* otroUsuario = buscarUsuarioPremiumPorNickname(nickname);

    if (otroUsuario == nullptr) {
        cout << "[Error] No se encontr√≥ un usuario premium con ese nickname." << endl;
        return;
    }

    ListaFavoritos* listaOtro = otroUsuario->getListaFavoritos();

    if (listaOtro == nullptr || listaOtro->estaVacia()) {
        cout << "[Info] Ese usuario no tiene canciones en favoritos." << endl;
        return;
    }

    ListaFavoritos* miLista = usuarioActivo->getListaFavoritos();

    if (miLista == nullptr) {
        cout << "[Error] No tienes una lista de favoritos creada." << endl;
        return;
    }

    int agregadas = 0;

    for (int i = 0; i < listaOtro->getCantidad(); i++) {
        Medidor::incrementarIteraciones();
        Cancion* cancion = listaOtro->obtenerCancion(i);

        if (cancion != nullptr && !miLista->contiene(cancion->getId())) {
            if (miLista->agregar(cancion)) {
                agregadas++;
            }
        }

        if (miLista->estaLlena()) {
            break;
        }
    }

    cout << "\n[‚úì] Se agregaron " << agregadas << " canciones nuevas a tus favoritos." << endl;
}

// Buscar usuario premium por nickname
Usuario* Plataforma::buscarUsuarioPremiumPorNickname(const string& nickname) {
    ArregloDinamico<Usuario*>& usuarios = gestorDatos->getUsuarios();

    for (int i = 0; i < usuarios.getCantidad(); i++) {
        Medidor::incrementarIteraciones();
        Usuario* usuario = usuarios.obtener(i);

        if (usuario->getNickname() == nickname && usuario->esPremium()) {
            return usuario;
        }
    }

    return nullptr;
}

// M√âTODO PRINCIPAL: EJECUTAR
void Plataforma::ejecutar() {
    if (!inicializar()) {
        return;
    }

    if (!autenticar()) {
        return;
    }

    mostrarBienvenida();

    cout << "Presiona ENTER para continuar...";
    cin.get();

    if (usuarioActivo->esPremium()) {
        menuUsuarioPremium();
    } else {
        menuUsuarioEstandar();
    }

    finalizar();
}

// Getters
GestorDatos* Plataforma::getGestorDatos() {
    return gestorDatos;
}

Usuario* Plataforma::getUsuarioActivo() {
    return usuarioActivo;
}

bool Plataforma::hayUsuarioActivo() const {
    return usuarioActivo != nullptr && sesionActiva;
}
